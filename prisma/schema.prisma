generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id               String              @id @default(cuid())
  name             String?
  email            String?             @unique
  emailVerified    DateTime?
  image            String?
  publicId         String?
  position         String?
  role             String?
  hasBeenOnboarded Boolean?            @default(false)
  accounts         Account[]
  sessions         Session[]
  organization     Organization?
  onboardingProgs  OnboardingProgram[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

// Define the Organization entity
model Organization {
  id                       String                     @id @default(uuid())
  name                     String
  noOfEmployees            String
  industry                 String
  user                     User                       @relation(fields: [userId], references: [id])
  userId                   String                     @unique
  onboardingProgs          OnboardingProgram[]
  onboardingProgramTalents OnboardingProgramTalents[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

// Define the OnboardingProgram entity
model OnboardingProgram {
  id                       String                     @id @default(uuid())
  name                     String
  content                  String
  organization             Organization               @relation(fields: [organizationId], references: [id])
  organizationId           String
  users                    User[]
  invites                  invites[]
  onboardingProgramTalents OnboardingProgramTalents[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

model OnboardingProgramTalents {
  id                String            @id @default(uuid())
  name              String
  role              String
  email             String            @unique
  hasBeenOnboarded  Boolean?          @default(false)
  programId         String
  OnboardingProgram OnboardingProgram @relation(fields: [programId], references: [id])
  organizationId    String
  Organization      Organization      @relation(fields: [organizationId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model template {
  id        String   @id @default(cuid())
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model invites {
  id                  String            @id @default(cuid())
  email               String            @unique
  onboardingProgramId String
  OnboardingProgram   OnboardingProgram @relation(fields: [onboardingProgramId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}
