generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id                        String                     @id @default(cuid())
  name                      String?
  email                     String?                    @unique
  emailVerified             DateTime?
  image                     String?
  position                  String?
  role                      String?
  talentOrgId               String?
  customerId                String?
  hasBeenOnboarded          Boolean?                   @default(false)
  accounts                  Account[]
  sessions                  Session[]
  onboardingProgs           OnboardingProgram[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  CreatedOnboardingPrograms OnboardingProgram[]        @relation("createdBy")
  Organization              Organization?
  OnboardingProgramTalents  OnboardingProgramTalents[]

  @@index([email], name: "email")
}

model Organization {
  id                       String                     @id @default(uuid())
  name                     String
  noOfEmployees            String
  industry                 String
  website                  String?
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String                     @unique
  onboardingProgs          OnboardingProgram[]
  onboardingProgramTalents OnboardingProgramTalents[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  ProgramSection           ProgramSection[]
}

model OnboardingProgram {
  id                       String                     @id @default(uuid())
  name                     String
  description              String
  categories               String[]
  image                    String?
  creator                  User                       @relation(fields: [createdBy], references: [id], name: "createdBy", onDelete: Cascade)
  createdBy                String
  organization             Organization               @relation(fields: [organizationId], references: [id])
  organizationId           String
  users                    User[]
  onboardingProgramTalents OnboardingProgramTalents[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  courseModuleId           String?
  ProgramSection           ProgramSection[]
  QuizQuestion             QuizQuestion[]
}

model ProgramSection {
  id           String             @id @default(cuid())
  type         String
  content      String?
  link         String?
  name         String?
  published    Boolean            @default(false)
  programId    String?
  Program      OnboardingProgram? @relation(fields: [programId], references: [id], onDelete: Cascade)
  orgId        String
  Organization Organization       @relation(fields: [orgId], references: [id])
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model OnboardingProgramTalents {
  id                String            @id @default(uuid())
  enrollmentStatus  String            @default("pending") // pending, enrolled, completed
  userId            String
  User              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId         String
  OnboardingProgram OnboardingProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  Organization      Organization?     @relation(fields: [organizationId], references: [id])
  organizationId    String?

  @@unique([userId, programId])
  @@index([userId], name: "userId")
  @@index([organizationId], name: "organizationId")
}

model QuizQuestion {
  id          String            @id @default(cuid())
  question    String
  choiceA     String
  choiceB     String
  choiceC     String
  choiceD     String
  answer      String
  explanation String
  programId   String
  Program     OnboardingProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([programId], name: "programId")
}

model TalentProgramResults {
  id          String   @id @default(cuid())
  userId      String
  programId   String
  quizAnswers String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TalentQuizAnswers {
  id         String   @id @default(cuid())
  userId     String
  programId  String
  questionId String
  answer     String
  isCorrect  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model template {
  id        String   @id @default(cuid())
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model invites {
  id        String   @id @default(cuid())
  email     String   @unique
  orgId     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orgId], name: "orgId")
}
